# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'okay.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox
import numpy as np
import pandas as pd
import csv
classname="ClassName"
w1=w2=w3=w4=w5=20
df=pd
ResultList2=[]
# np.array
class Ui_Dialog(object):
    def setupUi(self, Dialog):
        
         # show a message box with "Hello!"
        msg_box = QMessageBox()

        # Set the message and other properties
        msg_box.setText("Hello! There :)\n1st) Select the class name.\n2nd) Give your desired weightages.\n3rd) Click on show result.\n4th) Save that to a csv file.\n5th) Now click on final result\n\nNote:\nThe Weightages are already set to 20 by default")
        msg_box.setWindowTitle("Welcome")
        msg_box.setIcon(QMessageBox.Information)
        msg_box.setStandardButtons(QMessageBox.Ok)

        # Show the message box
        result = msg_box.exec_()
        
        msg_box = QMessageBox()

        # Set the message and other properties
        msg_box.setText("Dear Sir Farooq!\nPlease Give Us Good Marks.\nSir You Are Very Nice\nIf You Want To Give Us Full Marks Click On Okay.\nIf You Are Thinking About Giving Us Full Marks Click Maybe Later\nIf You Want To Give Us Full Marks-1 Click On Cancel :(")
        msg_box.setWindowTitle("Hello Sir!")
        msg_box.setIcon(QMessageBox.Information)

        # Add custom buttons
        msg_box.addButton("Okay! :)", QMessageBox.AcceptRole)
        msg_box.addButton("Cancel :(", QMessageBox.RejectRole)

        # Set default button
        msg_box.setDefaultButton(msg_box.addButton("Maybe Later 0_0", QMessageBox.ActionRole))

        # Show the message box
        result = msg_box.exec_()

        # Check the result
        if result == QMessageBox.AcceptRole:
            print("User clicked Continue")
        elif result == QMessageBox.RejectRole:
            print("User clicked Cancel")
        else:
            print("User clicked Maybe Later")
        
        
        Dialog.setObjectName("Dialog")
        Dialog.resize(1076, 564)
        
        
        
        self.pushButton_2 = QtWidgets.QPushButton(Dialog)
        self.pushButton_2.setGeometry(QtCore.QRect(980, 20, 91, 32))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.on_pushButton_2_clicked)
        
        
        self.pushButton_3 = QtWidgets.QPushButton(Dialog)
        self.pushButton_3.setGeometry(QtCore.QRect(980, 70, 91, 32))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.clicked.connect(self.on_pushButton_3_clicked)
        
        
        self.pushButton_4 = QtWidgets.QPushButton(Dialog)
        self.pushButton_4.setGeometry(QtCore.QRect(980, 120, 91, 32))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_4.clicked.connect(self.on_pushButton_4_clicked)
        
        
        
        self.pushButton_5 = QtWidgets.QPushButton(Dialog)
        self.pushButton_5.setGeometry(QtCore.QRect(980, 170, 91, 32))
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_5.clicked.connect(self.on_pushButton_5_clicked)
        
        
        
        self.pushButton = QtWidgets.QPushButton(Dialog)
        self.pushButton.setGeometry(QtCore.QRect(10, 520, 111, 32))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.Show_Result)
        
        self.pushButton_6 = QtWidgets.QPushButton(Dialog)
        self.pushButton_6.setGeometry(QtCore.QRect(980, 520, 91, 32))
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_6.clicked.connect(Dialog.close)
    
        
        
        
        self.tableWidget = QtWidgets.QTableWidget(Dialog)
        self.tableWidget.setGeometry(QtCore.QRect(10, 20, 961, 491))
        self.tableWidget.setObjectName("tableWidget")

        
        
        self.pushButton_7 = QtWidgets.QPushButton(Dialog)
        self.pushButton_7.setGeometry(QtCore.QRect(170, 520, 301, 32))
        self.pushButton_7.setObjectName("pushButton_7")
        self.pushButton_7.clicked.connect(self.Save_File)



        self.pushButton_8 = QtWidgets.QPushButton(Dialog)
        self.pushButton_8.setGeometry(QtCore.QRect(510, 520, 221, 32))
        self.pushButton_8.setObjectName("pushButton_8")
        self.pushButton_8.clicked.connect(self.Show_Final_Result)
        
        
        self.RollNumberEdit = QtWidgets.QLineEdit(Dialog)
        self.RollNumberEdit.setGeometry(QtCore.QRect(980, 240, 91, 30))
        self.RollNumberEdit.setObjectName("RollNumberEdit")
        
        
        
        
        
        self.pushButton_9 = QtWidgets.QPushButton(Dialog)
        self.pushButton_9.setGeometry(QtCore.QRect(980, 280, 91, 32))
        self.pushButton_9.setObjectName("pushButton_9")
        self.pushButton_9.clicked.connect(self.on_pushButton_9_clicked)
        
        
        self.label = QtWidgets.QLabel(Dialog)
        self.label.setGeometry(QtCore.QRect(980, 210, 91, 22))
        self.label.setObjectName("label")
        
        
        
        self.W1 = QtWidgets.QLineEdit(Dialog)
        self.W1.setGeometry(QtCore.QRect(1040, 320, 31, 30))
        self.W1.setObjectName("W1")
        self.W2 = QtWidgets.QLineEdit(Dialog)
        self.W2.setGeometry(QtCore.QRect(1040, 360, 31, 30))
        self.W2.setObjectName("W2")
        self.W3 = QtWidgets.QLineEdit(Dialog)
        self.W3.setGeometry(QtCore.QRect(1040, 400, 31, 30))
        self.W3.setObjectName("W3")
        self.W4 = QtWidgets.QLineEdit(Dialog)
        self.W4.setGeometry(QtCore.QRect(1040, 440, 31, 30))
        self.W4.setObjectName("W4")
        self.W5 = QtWidgets.QLineEdit(Dialog)
        self.W5.setGeometry(QtCore.QRect(1040, 480, 31, 30))
        self.W5.setObjectName("W5")
        
        
        
        
        
        
        self.LabPr = QtWidgets.QPushButton(Dialog)
        self.LabPr.setGeometry(QtCore.QRect(975, 320, 61, 32))
        self.LabPr.setObjectName("LabPr")
        self.LabPr.clicked.connect(self.on_LabPrformance_clicked)
        
        
        
        self.LabRep = QtWidgets.QPushButton(Dialog)
        self.LabRep.setGeometry(QtCore.QRect(975, 360, 61, 32))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.LabRep.setFont(font)
        self.LabRep.setObjectName("LabRep")
        self.LabRep.clicked.connect(self.on_LabReport_clicked)
        
        
        
        self.MidTerm = QtWidgets.QPushButton(Dialog)
        self.MidTerm.setGeometry(QtCore.QRect(975, 400, 61, 32))
        self.MidTerm.setObjectName("MidTerm")
        self.MidTerm.clicked.connect(self.on_Mid_clicked)
        
        self.FinalTerm = QtWidgets.QPushButton(Dialog)
        self.FinalTerm.setGeometry(QtCore.QRect(975, 440, 61, 32))
        self.FinalTerm.setObjectName("FinalTerm")
        self.FinalTerm.clicked.connect(self.on_Final_clicked)
        
        
        self.CEP = QtWidgets.QPushButton(Dialog)
        self.CEP.setGeometry(QtCore.QRect(975, 480, 61, 32))
        self.CEP.setObjectName("CEP")
        self.CEP.clicked.connect(self.on_CEP_clicked)
        
        
        

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)
        
    def Show_Final_Result(self):
        global df1
        row_count = df1.shape[0]
        col_count = df1.shape[1]
        print("\n\nFinal Result Testing With df1\n\n")
        print(df1)
        # Set the number of rows and columns in the table
        self.tableWidget.setRowCount(int(row_count)+1)
        self.tableWidget.setColumnCount(int(col_count))
        self.tableWidget.setItem(0, 0, QtWidgets.QTableWidgetItem("Roll numbers"))
        self.tableWidget.setItem(0, 1, QtWidgets.QTableWidgetItem("Names"))
        self.tableWidget.setItem(0, 2, QtWidgets.QTableWidgetItem("Lab Performance"))
        self.tableWidget.setItem(0, 3, QtWidgets.QTableWidgetItem("Lab Report"))
        self.tableWidget.setItem(0, 4, QtWidgets.QTableWidgetItem("Midterm"))
        self.tableWidget.setItem(0, 5, QtWidgets.QTableWidgetItem("Final term"))
        self.tableWidget.setItem(0, 6, QtWidgets.QTableWidgetItem("CEA"))
        self.tableWidget.setItem(0, 7, QtWidgets.QTableWidgetItem("Total"))
        self.tableWidget.setItem(0, 8, QtWidgets.QTableWidgetItem("Grade"))
        for i in range(row_count):
            for j in range(col_count):
            # Get the value from the .csv file at the current row and column
                value = str(df1.iloc[i, j])
        # Set the table cell at the current row and column to the value from the .csv file
                self.tableWidget.setItem(i+1, j, QtWidgets.QTableWidgetItem(value))
        
    def Show_Result(self):
        global df
        row_count = df.shape[0]
        col_count = df.shape[1]
        # Set the number of rows and columns in the table
        self.tableWidget.setRowCount(int(row_count)+1)
        self.tableWidget.setColumnCount(int(col_count))

        self.tableWidget.setItem(0, 0, QtWidgets.QTableWidgetItem("Roll numbers"))
        self.tableWidget.setItem(0, 1, QtWidgets.QTableWidgetItem("Names"))
        self.tableWidget.setItem(0, 2, QtWidgets.QTableWidgetItem("Lab Performances (out of 15)"))

        self.tableWidget.setItem(0, 3, QtWidgets.QTableWidgetItem(""))
        self.tableWidget.setItem(0, 4, QtWidgets.QTableWidgetItem(""))
        self.tableWidget.setItem(0, 5, QtWidgets.QTableWidgetItem(""))
        self.tableWidget.setItem(0, 6, QtWidgets.QTableWidgetItem(""))
        self.tableWidget.setItem(0, 7, QtWidgets.QTableWidgetItem(""))
        self.tableWidget.setItem(0, 8, QtWidgets.QTableWidgetItem(""))

        self.tableWidget.setItem(0, 16, QtWidgets.QTableWidgetItem("Lab Reports (out of 15)"))
        self.tableWidget.setItem(0, 30, QtWidgets.QTableWidgetItem("Midterm (out of 55)"))
        self.tableWidget.setItem(0, 31, QtWidgets.QTableWidgetItem("Final term (out of 50)"))
        self.tableWidget.setItem(0, 32, QtWidgets.QTableWidgetItem("CEA (out of 20)"))
        for i in range(row_count):
            for j in range(col_count):
            # Get the value from the .csv file at the current row and column
                value = str(df.iloc[i, j])

        # Set the table cell at the current row and column to the value from the .csv file
                self.tableWidget.setItem(i+1, j, QtWidgets.QTableWidgetItem(value))
        
    def on_pushButton_2_clicked(self):
        global df
        df = pd.read_csv("/home/baymax/Air Uni Code/Sir-Farooq/Mid/CE-112LBEEP2A.csv")
        global classname
        classname = "CE-112LBEEP2A_Result.csv"
        print(classname)

    def on_pushButton_3_clicked(self):
        global df
        df = pd.read_csv("/home/baymax/Air Uni Code/Sir-Farooq/Mid/CE-112LMTS2A.csv")
        global classname
        classname="CE-112LMTS2A_Result.csv"
        print(classname)
        
    def on_pushButton_4_clicked(self):
        global df
        df = pd.read_csv("/home/baymax/Air Uni Code/Sir-Farooq/Mid/CE-112LMTS2B.csv")
        global classname
        classname="CE-112LMTS2B_Result.csv"
        print(classname)
     
    def on_pushButton_5_clicked(self):
        global df
        df = pd.read_csv("/home/baymax/Air Uni Code/Sir-Farooq/Mid/BCE3.csv")
        global classname
        classname="CE-BCE3.csv"
        print(classname)

    def CalculateClassResult(self):
        global w1,w2,w3,w4,w5,df
        # Lab Performance
        LabPer=np.array(df.iloc[:,2:16])
        ObtainedLabPer=np.sum(LabPer,axis=1,dtype=float)
        # (obtained marks/total marks)*weightage
        for i in range (len(ObtainedLabPer)):
            ObtainedLabPer[i]=(ObtainedLabPer[i]/210)*w1
        # print(ObtainedLabPer.reshape(23,1))

        # Lab Report
        LabReport=np.array(df.iloc[:,16:30])
        ObtainedLabReport=np.sum(LabReport,axis=1,dtype=float)
        # (obtained marks/total marks)*weightage
        for i in range (len(ObtainedLabReport)):
            ObtainedLabReport[i]=(ObtainedLabReport[i]/210)*w2
        # print(ObtainedLabReport.reshape(23,1))

        # MidTerm
        Mid=np.array(df.iloc[:,30:31])
        ObtainedMid=np.sum(Mid,axis=1,dtype=float)
        # (obtained marks/total marks)*weightage
        for i in range (len(Mid)):
            ObtainedMid[i]=(ObtainedMid[i]/55)*w3
        # print(ObtainedMid.reshape(23,1))

    
        # Final Term
        Final=np.array(df.iloc[:,31:32])
        ObtainedFinal=np.sum(Final,axis=1,dtype=float)
        for i in range (len(Final)):
            ObtainedFinal[i]=(ObtainedFinal[i]/50)*w4
        # print(ObtainedFinal.reshape(23,1))

        # CEA
        CEA=np.array(df.iloc[:,32:33])
        ObtainedCEA=np.sum(CEA,axis=1,dtype=float)
        # print(ObtainedCEA)

        for i in range (len(CEA)):
            ObtainedCEA[i]=(ObtainedCEA[i]/20)*w5
        # print(ObtainedCEA.reshape(23,1))
        ResultList=[]
        RandomList=[]
        rollnumber=df[("Roll numbers")]
        NameList=df[("Names")]
        rollnumber=np.array(rollnumber)
        for i in range(len(rollnumber)):
            RandomList.append([rollnumber[i],NameList[i],ObtainedLabPer[i],ObtainedLabReport[i],ObtainedMid[i],ObtainedFinal[i],ObtainedCEA[i]])

        df4=pd.DataFrame(RandomList)
        Sum=np.array(df4.iloc[:,2:])
        S=np.sum(Sum,axis=1,dtype=float)

        for i in range (len(rollnumber)):
            ResultList.append([rollnumber[i],NameList[i],ObtainedLabPer[i],ObtainedLabReport[i],ObtainedMid[i],ObtainedFinal[i],ObtainedCEA[i],S[i]])

        # Calculating Grades
        for i in range (len(rollnumber)):
            if(ResultList[i][7]>=90):
                ResultList[i].append('A')
            elif(ResultList[i][7]>=80):
                ResultList[i].append('B')
            elif(ResultList[i][7]>=70):
                ResultList[i].append('C')
            elif(ResultList[i][7]>=60):
                ResultList[i].append('D')
            elif(ResultList[i][7]>=50):
                ResultList[i].append('E')
            elif(ResultList[i][7]<=50):
                ResultList[i].append("F")
        return ResultList     
     
    def Save_File(self):
        global w1,w2,w3,w4,w5
        if(self.Weightage()==False):
            self.tableWidget.setRowCount(1)
            self.tableWidget.setColumnCount(1)
            self.tableWidget.setItem(0, 0, QtWidgets.QTableWidgetItem("Weightages Should Add Up To 100!"))
            print(w1,"+",w2,"+",w3,"+",w4,"+",w5,"=",w1+w2+w3+w4+w5)
        else:
            global df,classname,df1
            global ResultList2
            ResultList=[]
            ResultList2=self.CalculateClassResult()
            file = open("/home/baymax/Air Uni Code/Sir-Farooq/Final/"+classname, 'w', newline ='')
            with file:   
                write = csv.writer(file)
                write.writerows(ResultList2)
            df1=pd.DataFrame(ResultList2)
            print("\n\nTesting: df1\n\n")
            print(df1)
            print("\n\nTesting: df\n\n")
            print(df)
            df1.columns=["Roll Number","Names","Lab Performance","Lab Report","Mid Term","Final Term","CEA","Total","Grade"]
            print("Saved the result in",classname)
     
    def on_pushButton_9_clicked(self):
        roll = int(self.RollNumberEdit.text())
        self.FindByRollNumber(roll)  
    
    def on_LabPrformance_clicked(self):
        global w1
        w1 = int(self.W1.text())
    
    def on_LabReport_clicked(self):
        global w2
        w2 = int(self.W2.text())

    def on_Mid_clicked(self):
        global w3
        w3 = int(self.W3.text())

    def on_Final_clicked(self):
        global w4
        w4 = int(self.W4.text())
        
    def on_CEP_clicked(self):
        global w5
        w5 = int(self.W5.text())
        
    def Weightage(self):
        global w1,w2,w3,w4,w5
        if(w1+w2+w3+w4+w5!=100):
            return False
            # self.tableWidget.setItem(1, 0, QtWidgets.QTableWidgetItem(str(w1),"+",str(w2),"+",str(w3),"+",str(w4),"+",str(w5),"=",ww))
        return True   
              
    def FindByRollNumber(self,roll):
        self.tableWidget.setRowCount(2)
        self.tableWidget.setColumnCount(9)
        global ResultList2
        Info="Student Not Found!"
        self.tableWidget.setItem(0, 0, QtWidgets.QTableWidgetItem("E"))
        self.tableWidget.setItem(0, 1, QtWidgets.QTableWidgetItem("R"))
        self.tableWidget.setItem(0, 2, QtWidgets.QTableWidgetItem("R"))
        self.tableWidget.setItem(0, 3, QtWidgets.QTableWidgetItem("O"))
        self.tableWidget.setItem(0, 4, QtWidgets.QTableWidgetItem("R"))
        self.tableWidget.setItem(0, 5, QtWidgets.QTableWidgetItem("-"))
        self.tableWidget.setItem(0, 6, QtWidgets.QTableWidgetItem("4"))
        self.tableWidget.setItem(0, 7, QtWidgets.QTableWidgetItem("0"))
        self.tableWidget.setItem(0, 8, QtWidgets.QTableWidgetItem("4"))
        
        self.tableWidget.setItem(1, 0, QtWidgets.QTableWidgetItem("N"))
        self.tableWidget.setItem(1, 1, QtWidgets.QTableWidgetItem("O"))
        self.tableWidget.setItem(1, 2, QtWidgets.QTableWidgetItem("-"))
        self.tableWidget.setItem(1, 3, QtWidgets.QTableWidgetItem("R"))
        self.tableWidget.setItem(1, 4, QtWidgets.QTableWidgetItem("E"))
        self.tableWidget.setItem(1, 5, QtWidgets.QTableWidgetItem("S"))
        self.tableWidget.setItem(1, 6, QtWidgets.QTableWidgetItem("U"))
        self.tableWidget.setItem(1, 7, QtWidgets.QTableWidgetItem("L"))
        self.tableWidget.setItem(1, 8, QtWidgets.QTableWidgetItem("T"))
        for i in range(len(ResultList2)):
            if(ResultList2[i][0]==roll):
                Info=ResultList2[i]
                self.tableWidget.setItem(0, 0, QtWidgets.QTableWidgetItem("Roll numbers"))
                self.tableWidget.setItem(0, 1, QtWidgets.QTableWidgetItem("Names"))
                self.tableWidget.setItem(0, 2, QtWidgets.QTableWidgetItem("Lab Performance"))
                self.tableWidget.setItem(0, 3, QtWidgets.QTableWidgetItem("Lab Report"))
                self.tableWidget.setItem(0, 4, QtWidgets.QTableWidgetItem("Midterm"))
                self.tableWidget.setItem(0, 5, QtWidgets.QTableWidgetItem("Final term"))
                self.tableWidget.setItem(0, 6, QtWidgets.QTableWidgetItem("CEA"))
                self.tableWidget.setItem(0, 7, QtWidgets.QTableWidgetItem("Total"))
                self.tableWidget.setItem(0, 8, QtWidgets.QTableWidgetItem("Grade"))
                self.tableWidget.setItem(1, 0, QtWidgets.QTableWidgetItem(str(ResultList2[i][0])))
                self.tableWidget.setItem(1, 1, QtWidgets.QTableWidgetItem(str(ResultList2[i][1])))
                self.tableWidget.setItem(1, 2, QtWidgets.QTableWidgetItem(str(ResultList2[i][2])))
                self.tableWidget.setItem(1, 3, QtWidgets.QTableWidgetItem(str(ResultList2[i][3])))
                self.tableWidget.setItem(1, 4, QtWidgets.QTableWidgetItem(str(ResultList2[i][4])))
                self.tableWidget.setItem(1, 5, QtWidgets.QTableWidgetItem(str(ResultList2[i][5])))
                self.tableWidget.setItem(1, 6, QtWidgets.QTableWidgetItem(str(ResultList2[i][6])))
                self.tableWidget.setItem(1, 7, QtWidgets.QTableWidgetItem(str(ResultList2[i][7])))
                self.tableWidget.setItem(1, 8, QtWidgets.QTableWidgetItem(str(ResultList2[i][8])))
                break
        print(Info)  
      
    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Teacher's Portal"))
        self.pushButton_2.setText(_translate("Dialog", "BEEP-2A"))
        self.pushButton_3.setText(_translate("Dialog", "MTS-2A"))
        self.pushButton_4.setText(_translate("Dialog", "MTS-2B"))
        self.pushButton_5.setText(_translate("Dialog", "BCE3"))
        self.pushButton.setText(_translate("Dialog", "Show Result"))
        self.pushButton_6.setText(_translate("Dialog", "Close/Exit"))
        self.pushButton_7.setText(_translate("Dialog", "Save Result To CSV/Generate Final Result"))
        self.pushButton_8.setText(_translate("Dialog", "Show Final Result With Grades"))
        self.pushButton_9.setText(_translate("Dialog", "Search"))
        self.label.setText(_translate("Dialog", "Roll Number"))
        self.LabPr.setText(_translate("Dialog", "Lab Per"))
        self.LabRep.setText(_translate("Dialog", "Lab Rep"))
        self.MidTerm.setText(_translate("Dialog", "Mid"))
        self.FinalTerm.setText(_translate("Dialog", "Final"))
        self.CEP.setText(_translate("Dialog", "CEP"))

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())